<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/simon-blog.github.io/2020/08/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>python元类和装饰器</title>
    <url>/simon-blog.github.io/2020/08/08/python%E5%85%83%E7%B1%BB%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h2><p>动态添加函数功能，相当于在原函数上套了一层皮，动态添加新的职责。比如Django，flask里的@session现在终于是弄明白那一块用户身份验证的原理了。（在原来的view函数上使用装饰者模式，如果http请求里包含了session的ID就允许render，从而实现一些页面对于用户的隐藏）</p>
<a id="more"></a>

<p>相关的身份验证代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_auth</span>(<span class="params">f</span>):</span></span><br><span class="line"><span class="meta">    @wraps(f)        # 这里的@开头的部分就是一个装饰器，虽然他不是重点，只是用来确保原函数属性不变</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        auth = request.authorization</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> <span class="keyword">not</span> check_auth(auth.username, auth.password):</span><br><span class="line">            authenticate()</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br></pre></td></tr></table></figure>

<p>可能这样看并不明显，那么接下来两个例子就很好的说明了他的具体用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        print(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        a_func()</span><br><span class="line"> </span><br><span class="line">        print(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    print(<span class="string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<p>a_new_decorator 这个函数以另一个函数为变量，a_function_requiring_decoration在使用装饰函数包裹他之后，他的输出就额外多出了两行。但是这并不是decorator的典型写法，下面才是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure>

<p>使用@开始一个装饰器，非常的优雅。同时装饰器并不是只能这么笨重的使用，他也是函数，他也是对象。那么他就可以附加额外的参数，甚至你可以定义一个装饰器类。当然这里就不展开细讲了。详细可以左转</p>
<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>可以创建类的类，听起来是不是很像工厂模式？虽然很像，但他可不只单单可以创建类那么简单，甚至可以修改已经创建好的类的属性。</p>
<p>正常的创建类的方式：</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MyClass = type(<span class="string">&#x27;Myclass&#x27;</span>, (), &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>使用元类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMeta</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用元类实现给类添加属性 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">mcs, name, bases, attrs</span>):</span></span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(mcs, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>(<span class="params">list, metaclass=ListMeta</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">l = MyList()</span><br><span class="line">l.add(<span class="number">1</span>)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure>

<p>你可能会奇怪，怎么写的这么别扭，还用了lamda函数，就往原来的类里面加了个add方法，那我用装饰器不就好了。U1S1,QS. 但是，元类绝对不是这么鸡肋的存在。我所了解的，Django，flask这些框架使用的ORM就是基于元类，对于model类的动态控制，来实现mysql语句的更新和管理使用到的数据。同时，元类还可以用于创建python里的单列模式。（但python所有东西都是对象，真的有必要单列吗）</p>
<h2 id="类的new-和-init"><a href="#类的new-和-init" class="headerlink" title="类的new__和__init"></a>类的<strong>new__和__init</strong></h2><p>惊了，markdown打不出来__new__方法吗，会变成加粗字体。嘛，反正你们也知道我在说什么吧。</p>
<p>一般在python里__new__方法创建实例，__init__负责初始化一个实例。__new__方法返回创建的对象，而__init__方法禁止返回值(必须返回None)。有一个简单的原则来判断什么使用使用__init__和__new__：</p>
<ul>
<li>如果需要修改类的属性，使用元类的__new__方法</li>
<li>如果只是做一些类属性检查的工作，使用元类的__init__方法</li>
<li>如果 new 方法不返回对象， 则不会调用 init 函数</li>
</ul>
<p>我能想到的这部分知识就先整理成这样吧，如果想起来还会加的。最后放一下参考的文章</p>
<p>，</p>
]]></content>
      <categories>
        <category>整理总结</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>常见网络攻击</title>
    <url>/simon-blog.github.io/2020/08/08/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前总结了网络的一些知识点，大概可以用网络的4层协议模型概括。虽然前博客的数据没了，但我会从新写一遍。今天就先来看一下之前没提到的网络安全这一块吧，也算是给自己查漏补缺了。</p>
<h3 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h3><hr>
<p>这个相信大家肯定都有所耳闻，以前我天真的以为就是在url的后面加上<code>or 1=1</code>显然并不是这样。在HTTP请求中注入恶意的SQL代码，服务器使用参数构建数据库SQL命令时，恶意SQL被一起构造，并在数据库中执行。比如你输入用户名密码登录时，你将请求修改为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = ‘lianggzone’ <span class="keyword">and</span> <span class="keyword">password</span> = ‘’ <span class="keyword">or</span> ‘<span class="number">1</span>’=‘<span class="number">1</span>’</span><br></pre></td></tr></table></figure>

<p>甚至，以前的校园网，不严谨的，设置密码时本身加上drop table这种，都属于SQL注入。所以他的原理很简单，让本应该只有一句SQL的语句，通过狗尾续貂的方式，再加上一句，使得SQL傻乎乎的去执行了第二句恶心代码。</p>
<p>那么我们防御的目标也就很明确了</p>
<ul>
<li>客户端<ul>
<li>有效性检验。</li>
<li>限制字符串输入的长度。 </li>
</ul>
</li>
<li>服务端<ul>
<li>不用拼接SQL字符串。</li>
<li>使用预编译的PrepareStatement。</li>
<li>有效性检验。(为什么服务端还要做有效性检验？第一准则，外部都是不可信的，防止攻击者绕过Web端请求)</li>
<li>过滤SQL需要的参数中的特殊字符。比如单引号、双引号。</li>
</ul>
</li>
</ul>
<h3 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h3><hr>
<p>跨站点脚本攻击，指攻击者通过篡改网页，嵌入恶意脚本程序，在用户浏览网页时，控制用户浏览器进行恶意操作的一种攻击方式。既然我可以在SQL语句上搞猫腻，那我下次在使用评论功能时，在里面写脚本呢？没错，这就是xss攻击了。听起来很蠢，但如果不佳防范他可是能把你内裤是什么颜色都扒个清楚。之后会提到，他和scrf一起攻击，拿到你的cookie信息后有多危险。</p>
<p>但是，他毕竟是显式的需要大摇大摆的写在http请求里的，要避免也并不复杂</p>
<ul>
<li><p>前端，服务端，同时需要字符串输入的长度限制。</p>
</li>
<li><p>前端，服务端，同时需要对HTML转义处理。将其中的”&lt;”,”&gt;”等特殊字符进行转义编码。</p>
</li>
<li><p>防 XSS 的核心是必须对输入的数据做过滤处理。</p>
</li>
</ul>
<h3 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h3><hr>
<p>重头戏，django自带避免csrf的中间件。跨站点请求伪造，指攻击者通过跨站请求，以合法的用户的身份进行非法操作。现在网站大抵都会提醒用户是否使用cookie就是因为害怕这个了。http在设计的时候本就是无状态的，既然是无状态那每次是否都需要做身份验证呢？如果把身份信息放置在一个地方，每次提交请求时直接从那里放进去，不就省了自己输入的麻烦？这也就是coockie的思想。</p>
<p>设想一下，下面的情况：</p>
<ol>
<li><p>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p>
</li>
<li><p>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p>
</li>
<li><p>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</p>
</li>
<li><p>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</p>
</li>
<li><p>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </p>
</li>
</ol>
<p>上面的这个例子，有几个点需要注意一下。首先csrf攻击并没有拿到你的coockie数据，只是利用了你现在还在登录的这个状态。第二他发送的恶意请求如果不加上反制措施是完全正常的。第三，但是他的确是从B网站而不是A网站发出去的。</p>
<p>针对上述特征，我们似乎可以对症下药了。</p>
<ul>
<li><p>尽量不要使用get去更新重要信息。get是在URL上明文传输的，而且对于穿过去的get请求的验证方式也没有post来的灵活。</p>
</li>
<li><p>送请求时，只有coockie里的信息是不够的。csrf最巧妙的地方就是他是一种愿者上钩的欺骗方式，一切的信息都是你coockie提供的，我只不过是提交了个请求而已。但是如果我们给提交请求额外设条件的话，csrf只能利用coockie，这样他伪造的请求就会因为条件不够而失败。比如：</p>
</li>
<li><p>在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。开始的时候我也是很奇怪，为什么加了一个token就行了。正常自己使用coockie时候也没看需要进行什么额外步骤啊。这是因为，除了cookie中的CSRF-Token外，请求体(POST)或者请求参数(GET)中也要有一个CSRF-Token，两者一样才是有效的。可是你csrf获取不到这个coockie里的token值啊，所以你伪造的请求里一定没有正确的token。（coockie里的token最好是httponly属性）</p>
</li>
<li><p>这个token不一定只可以放在请求里哦，还可以在HTTP头中定义属性验证。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token  值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest  请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>
</li>
<li><p>还有验证 HTTP Referer 字段的方法，http refer可以鉴别请求的来源地址，如果出自非本站，那很可能就是伪造的请求了。</p>
</li>
</ul>
<h3 id="DDos-攻击"><a href="#DDos-攻击" class="headerlink" title="DDos 攻击"></a>DDos 攻击</h3><hr>
<p>dos是一台电脑，ddos是多台电脑。因为我们知道http是应用层协议，建立在传输层tcp协议的基础上。那tcp连接要建立的话需要三次握手啊，如果你请求却又不进行第三次握手，相当于放服务器鸽子，服务器负载空增加，甚至严重就宕机了。</p>
<p>说实话这个目前也没什么好办法，毕竟也是合理的游戏规则，要解决就多花钱吧。</p>
<ul>
<li>同时打开SYN半链接的数目</li>
<li>SYN半链接的Time out 时间</li>
<li>不必要的服务</li>
</ul>
<p>最后可能还有一些其他的，比如dns劫持，dns投毒，apr劫持啥的，这里就不细细讨论了啊，为啥呢？因为我想睡觉了。下次一定，下次一定。</p>
]]></content>
      <categories>
        <category>整理总结</category>
      </categories>
      <tags>
        <tag>知识整理</tag>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
